from aiogram import Router, Bot, F
from aiogram.types import Message, FSInputFile
from middlewares import IsVerifiedMiddleware, AuthorizeMiddleware
from services.images import image_generator
from database.models import User

router = Router()
router.message.middleware(AuthorizeMiddleware())
router.message.middleware(IsVerifiedMiddleware())
router.callback_query.middleware(AuthorizeMiddleware())
router.callback_query.middleware(IsVerifiedMiddleware())


@router.message(F.text == 'üíé –ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message, user: User):
    try:
        data = ['BRONZE', '2', '0', str(user.balance), '25000']
        image = image_generator.generate_image(data)
        image_path = FSInputFile(image)
        text_caption = ('<b>üîÆ –ü—Ä–æ—Ñ–∏–ª—å –≤–æ—Ä–∫–µ—Ä–∞</b>\n\n'
                        f'Telegram ID: {user.tg_id}\n')
        await message.answer_photo(photo=image_path,
                                   caption='<b>üîÆ –ü—Ä–æ—Ñ–∏–ª—å –≤–æ—Ä–∫–µ—Ä–∞</b>', parse_mode='HTML')
    except Exception as e:
        await message.answer(text=f'Error: {e}')


@router.message(F.text == 'üíº –¢—Ä–µ–π–¥ –±–æ—Ç')
async def trade_bot(message: Message, user: User):
    referal_code = '0'
    phone_number = '0'  # TODO: create adding bank details and referral link
    card = '0'
    text = ('üíº <b>–¢—Ä–µ–π–¥ –±–æ—Ç</b>\n'
            f'‚îñ –í–∞—à –∫–æ–¥: {referal_code}\n\n'
            f'<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã</b>'
            f'‚î† –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n'
            f'‚îñ –ö–∞—Ä—Ç–∞: {card}\n\n'
            f'<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n'
            f'<a href=''>–ù–∞–∂–º–∏ –∏ —Å–∫–æ–ø–∏—Ä—É–π</a>')
    await message.answer(text, parse_mode='HTML')

@router.message(F.text == 'üéÜ NFT –±–æ—Ç')
async def nft_bot(message: Message, user: User):
    referal_code = '0'
    phone_number = '0'  # TODO: create adding bank details and referral link
    card = '0'
    text = ('üéÜ <b>NFT –±–æ—Ç</b>\n'
            f'‚îñ –í–∞—à –∫–æ–¥: {referal_code}\n\n'
            f'<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã</b>'
            f'‚î† –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n'
            f'‚îñ –ö–∞—Ä—Ç–∞: {card}\n\n'
            f'<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n'
            f'<a href=''>–ù–∞–∂–º–∏ –∏ —Å–∫–æ–ø–∏—Ä—É–π</a>')
    await message.answer(text, parse_mode='HTML')


@router.message(F.text == 'üóΩ –û –ø—Ä–æ–µ–∫—Ç–µ')
async def about_project(message: Message, user: User):
    text = ('<b>üóΩ–û –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n')
    await message.answer(text, parse_mode='HTML')

