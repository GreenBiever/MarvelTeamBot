from aiogram import Router, Bot, F
from aiogram.types import Message, FSInputFile,  CallbackQuery
from main_bot.middlewares import IsVerifiedMiddleware, AuthorizeMiddleware
from sqlalchemy.ext.asyncio import AsyncSession
from main_bot.services.images import image_generator
from main_bot.database.models import User, PaymentDetails
from main_bot import config
from main_bot.keyboards import kb
from sqlalchemy import select

router = Router()
router.message.middleware(AuthorizeMiddleware())
router.message.middleware(IsVerifiedMiddleware())
router.callback_query.middleware(AuthorizeMiddleware())
router.callback_query.middleware(IsVerifiedMiddleware())


@router.message(F.text == 'üßê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def admin_panel(message: Message, user: User):
    if user.tg_id in config.ADMIN_IDS:
        await message.answer('–û—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', reply_markup=kb.admin_panel)


@router.message(F.text == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
async def users(message: Message, user: User, bot: Bot, session: AsyncSession):
    if user.tg_id in config.ADMIN_IDS:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(select(User))
        users = result.scalars().all()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ç–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥
        if users:
            text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in users:
                text += f'ID: {user.id}\nTG ID: {user.tg_id}\n–ò–º—è: {user.fname or ""}\n–§–∞–º–∏–ª–∏—è: {user.lname or ""}\nUsername: {user.username or ""}\n–ë–∞–ª–∞–Ω—Å: {user.balance}\n–ü—Ä–æ–≤–µ—Ä–µ–Ω: {"–î–∞" if user.is_verified else "–ù–µ—Ç"}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {"–î–∞" if user.is_blocked else "–ù–µ—Ç"}\n\n'
        else:
            text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        await message.answer(text=text)


@router.message(F.text == '–†–µ–∫–≤–∏–∑–∏—Ç—ã')
async def details(message: Message, user: User):
    if user.tg_id in config.ADMIN_IDS:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: ', reply_markup=kb.services_details)


@router.callback_query(F.data.startswith('details_service|'))
async def choose_service(call: CallbackQuery, user: User, session: AsyncSession):
    global service_name
    service_id = call.data.split('|')[1]
    if service_id == '1':
        service_name = 'üíº –¢—Ä–µ–π–¥ –±–æ—Ç'
    elif service_id == '2':
        service_name = 'üéÜ NFT –±–æ—Ç'

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
    result = await session.execute(select(PaymentDetails).where(PaymentDetails.service_id == int(service_id)))
    payment_details = result.scalars().all()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç
    if payment_details:
        text = f"–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è {service_name}:\n\n"
        for detail in payment_details:
            text += f"–¢–∏–ø: {detail.type}\n–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: {detail.account_number}\n\n"
    else:
        text = f"–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è {service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.message.answer(text=text)

