from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select, update, delete
from sqlalchemy.ext.asyncio import AsyncSession
from main_bot import config
from main_bot.database.models import User, PaymentDetails
from main_bot.keyboards import kb
from main_bot.middlewares import IsVerifiedMiddleware, AuthorizeMiddleware
from main_bot.admin_handlers.states import ControlUsers, AddPaymentDetails, DeletePayment, Mailing

router = Router()
router.message.middleware(AuthorizeMiddleware())
router.message.middleware(IsVerifiedMiddleware())
router.callback_query.middleware(AuthorizeMiddleware())
router.callback_query.middleware(IsVerifiedMiddleware())


@router.message(F.text == 'üßê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def admin_panel(message: Message, user: User):
    if user.tg_id in config.ADMIN_IDS:
        await message.answer('–û—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', reply_markup=kb.admin_panel)


@router.message(F.text == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
async def users(message: Message, user: User, bot: Bot, session: AsyncSession):
    if user.tg_id in config.ADMIN_IDS:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(select(User))
        users = result.scalars().all()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ç–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥
        if users:
            text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in users:
                text += f'ID: {user.id}\nTG ID: {user.tg_id}\n–ò–º—è: {user.fname or ""}\n–§–∞–º–∏–ª–∏—è: {user.lname or ""}\nUsername: {user.username or ""}\n–ë–∞–ª–∞–Ω—Å: {user.balance}\n–ü—Ä–æ–≤–µ—Ä–µ–Ω: {"–î–∞" if user.is_verified else "–ù–µ—Ç"}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {"–î–∞" if user.is_blocked else "–ù–µ—Ç"}\n\n'
        else:
            text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        await message.answer(text=text, reply_markup=kb.control_users)


@router.callback_query(F.data == 'control_users')
async def control_users(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∂–µ: ')
    await state.set_state(ControlUsers.user_id)


@router.message(StateFilter(ControlUsers.user_id))
async def get_user(message: Message, session: AsyncSession, state: FSMContext):
    user_id = message.text
    result = await session.execute(select(User).where(User.id == int(user_id)))
    user = result.scalars().first()
    if user:
        if user.is_blocked:
            button_text = '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'
            callback_data = 'unblock'
        else:
            button_text = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'
            callback_data = 'block'
        user_action_kb = [
            [InlineKeyboardButton(text=button_text, callback_data=f'user|{callback_data}'),
             InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'user|writemessage')],
            [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='user|back')]
        ]
        user_action = InlineKeyboardMarkup(inline_keyboard=user_action_kb)
        await message.answer(text=f"ID: {user.id}\nTG ID: {user.tg_id}\n–ò–º—è: {user.fname or ''}\n"
                                  f"–§–∞–º–∏–ª–∏—è: {user.lname or ''}\nUsername: {user.username or ''}\n"
                                  f"–ë–∞–ª–∞–Ω—Å: {user.balance}\n–ü—Ä–æ–≤–µ—Ä–µ–Ω: {'–î–∞' if user.is_verified else '–ù–µ—Ç'}\n"
                                  f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user.is_blocked else '–ù–µ—Ç'}", reply_markup=user_action)
        await state.update_data(user_id=user_id)
    else:
        await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await state.clear()


@router.callback_query(F.data.startswith('user|'))
async def action_user(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    action = call.data.split('|')[1]
    data = await state.get_data()
    user_id = data['user_id']
    if action == 'block':
        await session.execute(update(User).where(User.id == user_id).values(is_blocked=True))
        await session.commit()
        await call.message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')
    elif action == 'unblock':
        await session.execute(update(User).where(User.id == user_id).values(is_blocked=False))
        await session.commit()
        await call.message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')
    elif action == 'writemessage':
        await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:')
        await state.set_state(ControlUsers.write_message)
    elif action == 'back':
        await call.answer('–û—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', reply_markup=kb.admin_panel)
        await state.clear()


@router.message(StateFilter(ControlUsers.write_message))
async def write_message(message: Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    user = await session.execute(select(User).where(User.id == user_id))
    user = user.scalars().first()
    if user:
        await message.bot.send_message(user.tg_id, text=message.text)
        await message.delete()
        await message.delete()
        await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')

    else:
        await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')


@router.message(F.text == '–†–µ–∫–≤–∏–∑–∏—Ç—ã')
async def details(message: Message, user: User):
    if user.tg_id in config.ADMIN_IDS:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: ', reply_markup=kb.services_details)


@router.callback_query(F.data.startswith('details_service|'))
async def choose_service(call: CallbackQuery, user: User, session: AsyncSession, state: AddPaymentDetails.service):
    await call.message.delete()
    global service_name
    service_id = call.data.split('|')[1]
    if service_id == '1':
        service_name = 'üíº –¢—Ä–µ–π–¥ –±–æ—Ç'
        service_id = 'trade'
        await state.update_data(service='trade')
    elif service_id == '2':
        service_name = 'üéÜ NFT –±–æ—Ç'
        service_id = 'nft'
        await state.update_data(service='nft')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
    result = await session.execute(select(PaymentDetails).where(PaymentDetails.service == service_id))
    payment_details = result.scalars().all()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç
    if payment_details:
        text = f"–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è {service_name}:\n\n"
        for detail in payment_details:
            text += f"ID: {detail.id} –¢–∏–ø: {detail.type}\n–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: {detail.account_number}\n\n"
    else:
        text = f"–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è {service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.message.answer(text=text, reply_markup=kb.add_payment_details)


@router.callback_query(F.data == 'add_payment_details')
async def add_payment_details(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ', reply_markup=kb.add_payment_details_method)


@router.callback_query(F.data.startswith('add_payment_details_method|'))
async def add_payment_details_method(call: CallbackQuery, state: AddPaymentDetails.type):
    await call.message.delete()
    method = call.data.split('|')[1]
    await state.update_data(type=method)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞: ')
    await state.set_state(AddPaymentDetails.details)


@router.message(StateFilter(AddPaymentDetails.details))
async def add_payment_details_details(message: Message, state: FSMContext, session: AsyncSession):
    await message.delete()
    account_number = message.text
    data = await state.get_data()
    service = data['service']
    type = data['type']
    try:
        new_payment_details = PaymentDetails(
            service=service,
            type=type,
            account_number=account_number
        )
        session.add(new_payment_details)
        await session.commit()
        await message.answer('–†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.')
    except Exception as e:
        await session.rollback()  # –æ—Ç–∫–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        print(f'Error with adding to db: {e}')
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.')
    await state.clear()


@router.callback_query(F.data == 'delete_payment_details')
async def delete_payment_details(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ ID —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ')
    await state.set_state(DeletePayment.id)


@router.message(StateFilter(DeletePayment.id))
async def delete_payment_details_id(message: Message, session: AsyncSession, state: FSMContext):
    await message.delete()
    payment_id = message.text
    try:
        await session.execute(delete(PaymentDetails).where(PaymentDetails.id == int(payment_id)))
        await session.commit()
        await message.answer('–†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.')
    except Exception as e:
        await session.rollback()
        print(f'Error with deleting from db: {e}')
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.')
    await state.clear()


@router.callback_query(F.data == 'back_to_admin')
async def back_to_admin(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer('–û—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', reply_markup=kb.admin_panel)


@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def statistics(message: Message, user: User):
    if user.tg_id in config.ADMIN_IDS:
        await message.answer('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')


@router.message(F.text == '–†–∞—Å—Å—ã–ª–∫–∞')
async def mailing(message: Message, user: User, state: FSMContext):
    if user.tg_id in config.ADMIN_IDS:
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ:')
        await state.set_state(Mailing.text)


@router.message(StateFilter(Mailing.text))
async def send_message(message: Message, session: AsyncSession, state: FSMContext):
    text = message.text
    users = await session.execute(select(User))
    users = users.scalars().all()
    for user in users:
        try:
            await message.bot.send_message(user.tg_id, text=text)
        except Exception as e:
            print(f'Error with sending message to {user.tg_id}: {e}')


@router.message(F.text == '–ù–∞–∑–∞–¥')
async def back(message: Message, user: User):
    if user.tg_id in config.ADMIN_IDS:
        await message.answer(text=f'<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, {user.fname}!\n –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –Ω–∏–∂–µ:</b>',
                             parse_mode="HTML", reply_markup=kb.main_admin)
