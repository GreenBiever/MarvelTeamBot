import json
import random
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import StateFilter
from aiogram.types import Message, FSInputFile
from nft_bot.keyboards import kb
from nft_bot.databases import requests
from nft_bot.states import deposit_state, withdraw_state, admin_items_state, worker_state
from nft_bot import config
from sqlalchemy.ext.asyncio import AsyncSession
from nft_bot.databases.models import User
from sqlalchemy import update, select

bot: Bot = Bot(config.TOKEN)
router = Router()
ADMIN_ID = config.ADMIN_ID
ADMIN_ID_LIST = [int(admin_id) for admin_id in ADMIN_ID.split(",")]
languages = ["en", "ru", "pl", "uk"]
translations = {}

for lang in languages:
    with open(f"locales/{lang}.json", "r", encoding="utf-8") as file:
        translations[lang] = json.load(file)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
def get_translation(lang, key, **kwargs):
    translation = translations[lang].get(key, key)
    if isinstance(translation, dict):
        translation = translation.get(kwargs['status'], kwargs['status'])
    return translation.format(**kwargs)


"""
Callback handlers for Admin functionality
"""


@router.message(F.text == '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def admin_panel(message: types.Message):
    if message.from_user.id in ADMIN_ID_LIST:
        await bot.send_message(message.from_user.id, text='–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', parse_mode="HTML",
                               reply_markup=kb.admin_panel)


@router.callback_query(lambda c: c.data == 'add_category')
async def add_category(call: types.CallbackQuery, state: admin_items_state.AdminCategoriesItems.category):
    await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT):', parse_mode="HTML")
    await state.set_state(admin_items_state.AdminCategoriesItems.category)


@router.message(StateFilter(admin_items_state.AdminCategoriesItems.category))
async def add_category_name(message: types.Message, state: admin_items_state.AdminCategoriesItems.category,
                            session: AsyncSession):
    category_name = message.text
    await state.clear()
    await requests.add_category(session, category_name)
    await message.answer(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!', parse_mode="HTML")


@router.callback_query(lambda c: c.data == 'add_item')
async def add_item(call: types.CallbackQuery, state: admin_items_state.AdminCategoriesItems.item,
                   session: AsyncSession):
    categories_keyboard = await kb.get_categories_kb(session)
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', parse_mode="HTML", reply_markup=categories_keyboard)
    await state.set_state(admin_items_state.AdminCategoriesItems.item)


@router.callback_query(lambda c: c.data.startswith('category_'))
async def add_item_to_category(call: types.CallbackQuery, state: admin_items_state.AdminCategoriesItems.item):
    category_id = call.data.split('_')[1]
    await state.update_data(category_id=category_id)
    await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ NFT:', parse_mode="HTML")
    await state.set_state(admin_items_state.AdminItems.item_name)


@router.message(StateFilter(admin_items_state.AdminItems.item_name))
async def add_item_name(message: types.Message, state: admin_items_state.AdminItems.item_name):
    item_name = message.text
    await state.update_data(item_name=item_name)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ NFT (–ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ "0")', parse_mode="HTML")
    await state.set_state(admin_items_state.AdminItems.item_description)


@router.message(StateFilter(admin_items_state.AdminItems.item_description))
async def add_item_description(message: types.Message, state: admin_items_state.AdminItems.item_description):
    item_description = message.text
    if item_description == '0':
        item_description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    await state.update_data(item_description=item_description)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É NFT –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö $:', parse_mode="HTML")
    await state.set_state(admin_items_state.AdminItems.item_price)


@router.message(StateFilter(admin_items_state.AdminItems.item_price))
async def add_item_price(message: types.Message, state: admin_items_state.AdminItems.item_price):
    item_price = message.text
    await state.update_data(item_price=item_price)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ NFT:', parse_mode="HTML")
    await state.set_state(admin_items_state.AdminItems.item_author)


@router.message(StateFilter(admin_items_state.AdminItems.item_author))
async def add_item_author(message: types.Message, state: admin_items_state.AdminItems.item_author):
    item_author = message.text
    await state.update_data(item_author=item_author)
    await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ NFT:', parse_mode="HTML")
    await state.set_state(admin_items_state.AdminItems.item_photo)


@router.message(StateFilter(admin_items_state.AdminItems.item_photo))
async def add_item_photo(message: types.Message, state: admin_items_state.AdminItems.item_photo, session: AsyncSession):
    item_photo = message.text
    data = await state.get_data()
    category_id = data.get('category_id')
    print(category_id)
    item_name = data.get('item_name')
    item_description = data.get('item_description')
    item_price = data.get('item_price')
    item_author = data.get('item_author')
    await requests.add_item(session, item_name, item_description, item_price, item_author, item_photo, category_id)
    await message.answer(text='NFT –¥–æ–±–∞–≤–ª–µ–Ω!', parse_mode="HTML")
    await state.clear()


@router.callback_query(lambda c: c.data == 'delete_category')
async def delete_category(call: types.CallbackQuery, state: admin_items_state.AdminCategoriesItems.category,
                          session: AsyncSession):
    categories_keyboard = await kb.get_categories_kb2(session)
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', parse_mode="HTML",
                              reply_markup=categories_keyboard)


@router.callback_query(lambda c: c.data.startswith('delete_category_'))
async def delete_category_callback(call: types.CallbackQuery, session: AsyncSession):
    category_id = call.data.split('_')[2]
    await requests.delete_category(session, int(category_id))
    await call.message.answer(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!', parse_mode="HTML")


@router.callback_query(lambda c: c.data == 'delete_item')
async def delete_item(call: types.CallbackQuery, state: admin_items_state.AdminCategoriesItems.item,
                      session: AsyncSession):
    items_keyboard = await kb.get_delete_items_kb(session)
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ NFT –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', parse_mode="HTML", reply_markup=items_keyboard)


@router.callback_query(lambda c: c.data.startswith('delete_item_'))
async def delete_item_callback(call: types.CallbackQuery, session: AsyncSession):
    item_id = call.data.split('_')[2]
    await requests.delete_item(session, int(item_id))
    await call.message.answer(text='NFT —É–¥–∞–ª–µ–Ω!', parse_mode="HTML")


@router.callback_query(lambda c: c.data == 'work_panel')
async def edit_item(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text='–í–æ—Ä–∫-–ø–∞–Ω–µ–ª—å: ',
                                parse_mode="HTML", reply_markup=kb.work_panel)


@router.callback_query(lambda c: c.data == 'connect_mamont')
async def connect_mamont(call: types.CallbackQuery, state: worker_state.WorkerPanel.mamont_id):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –ª–æ—Ö–º–∞—Ç–æ–≥–æ ü¶£:', parse_mode="HTML")
    await state.set_state(worker_state.WorkerPanel.mamont_id)


@router.message(StateFilter(worker_state.WorkerPanel.mamont_id))
async def connect_mamont_id(message: types.Message, user: User, state: worker_state.WorkerPanel.mamont_id,
                            session: AsyncSession):
    mamont_id = message.text

    if not mamont_id.isdigit():
        await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π mamont_id!', parse_mode="HTML")
        return

    result = await session.execute(select(User).where(User.tg_id == int(mamont_id)))
    user = result.scalars().first()

    if not user:
        await bot.send_message(chat_id=message.from_user.id, text='–¢–∞–∫–æ–≥–æ mamont_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', parse_mode="HTML")
        return

    elif user.referer_id is not None:
        await bot.send_message(chat_id=message.from_user.id, text='–≠—Ç–æ—Ç mamont_id —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!', parse_mode="HTML")
        pass

    else:
        await state.update_data(mamont_id=mamont_id)
        await session.execute(
            update(User)
            .where(User.tg_id == mamont_id)
            .values(referer_id=message.from_user.id)
        )
        await state.clear()
        await bot.send_message(chat_id=message.from_user.id, text='–õ–æ—Ö–º–∞—Ç—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω!', parse_mode="HTML")


@router.callback_query(lambda c: c.data == 'control_mamonts')
async def control_mamonts(call: types.CallbackQuery, session: AsyncSession, state: worker_state.WorkerMamont.mamont_id):
    result = await session.execute(select(User).where(User.referer_id == call.from_user.id))
    users = result.scalars().all()

    if users:
        text = '–õ–æ—Ö–º–∞—Ç—ã–µ:\n\n'
        for user in users:
            text += f'ID: {user.tg_id}\n'
        text += '\n<b>–í—Å–µ–≥–æ –ª–æ—Ö–º–∞—Ç—ã—Ö:</b> ' + str(len(users))
        text += '\n–í–≤–µ–¥–∏—Ç–µ ID –ª–æ—Ö–º–∞—Ç–æ–≥–æ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '
    else:
        text = '–£ –≤–∞—Å –Ω–µ—Ç –ª–æ—Ö–º–∞—Ç—ã—Ö.'

    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text,
                                parse_mode="HTML", reply_markup=kb.back_to_admin)
    await state.set_state(worker_state.WorkerMamont.mamont_id)


@router.callback_query(lambda c: c.data == 'back_to_admin')
async def back_to_admin(call: types.CallbackQuery, user: User):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: ',
                                parse_mode="HTML", reply_markup=kb.admin_panel)


@router.callback_query(lambda c: c.data == 'back_to_admin2')
async def back_to_admin2(call: types.CallbackQuery, user: User):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text='–í–æ—Ä–∫-–ø–∞–Ω–µ–ª—å: ',
                                parse_mode="HTML", reply_markup=kb.work_panel)


@router.message(StateFilter(worker_state.WorkerMamont.mamont_id))
async def mamont_control_panel(message: Message, session: AsyncSession):
    mamont_id = message.text
    mamont_id = message.text

    if not mamont_id.isdigit():
        await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π mamont_id!', parse_mode="HTML")
        return

    result = await session.execute(select(User).where(User.tg_id == int(mamont_id)))
    user = result.scalars().first()

    if not user:
        await bot.send_message(chat_id=message.from_user.id, text='–¢–∞–∫–æ–≥–æ mamont_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', parse_mode="HTML")
        return

    if user.is_buying:
        user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞'
    else:
        user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞'

    if user.is_withdraw:
        user_is_withdraw = '–í—ã–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω'
    else:
        user_is_withdraw = '–í—ã–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω'

    if user.is_verified:
        user_is_verified = '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
    else:
        user_is_verified = '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'

    keyboard = await kb.create_mamont_control_kb(mamont_id, session)
    text = (f'üèô <b>–ü—Ä–æ—Ñ–∏–ª—å –ª–æ—Ö–º–∞—Ç–æ–≥–æ</b> {mamont_id}\n\n'
            f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
            f'‚î† –ë–∞–ª–∞–Ω—Å: <b>{user.balance}</b>\n'
            f'‚î† –ú–∏–Ω. –¥–µ–ø–æ–∑–∏—Ç: <b>{user.min_deposit} RUB</b>\n'
            f'‚î† –ú–∏–Ω. –≤—ã–≤–æ–¥: <b>{user.min_withdraw} RUB</b>\n'
            f'‚î† üî∞ <b>{user_is_buying}</b>\n'
            f'‚î† üî∞ <b>{user_is_withdraw}</b>\n'
            f'‚îñ üî∫ <b>{user_is_verified}</b>\n\n'
            f'<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥–∏–Ω</b>\n'
            f'‚îñ {user.last_login}')
    await bot.send_message(chat_id=message.from_user.id, text=text, parse_mode="HTML", reply_markup=keyboard)